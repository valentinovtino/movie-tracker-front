// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LogInPage matches snapshot 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <LogInPage
    fetchUser={[Function]}
    postUser={[Function]}
    userHasErrored=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": LogInPage {
      "_reactInternalFiber": FiberNode {
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "fetchUser": [Function],
              "postUser": [Function],
              "userHasErrored": "",
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "fetchUser": [Function],
              "postUser": [Function],
              "userHasErrored": "",
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "fetchUser": [Function],
              "postUser": [Function],
              "userHasErrored": "",
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                                    <div
                                                      class="form-request"
                                    >
                                                      <button
                                                                        name="create-user"
                                                                        class="create-user button"
                                                      >
                                                                        Create Account
                                                      </button>
                                                      <button
                                                                        name="log-in"
                                                                        class="log-in button"
                                                      >
                                                                        Log In
                                                      </button>
                                    </div>
                                    <form
                                                      class="form-container"
                                    >
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="name"
                                                                        placeholder="Enter your name"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="email"
                                                                        placeholder="Enter your email"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="password"
                                                                        name="password"
                                                                        placeholder="Enter a password"
                                                                        value=""
                                                      />
                                                      <button
                                                                        class="submit-btn"
                                                                        type="submit"
                                                      >
                                                                        Submit 
                                                      </button>
                                                      <p />
                                                      <div />
                                    </form>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "fetchUser": [Function],
                                                                  "postUser": [Function],
                                                                  "userHasErrored": "",
                                                                }
                      }
/>,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "fetchUser": [Function],
                                                                  "postUser": [Function],
                                                                  "userHasErrored": "",
                                                                }
                      }
/>,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "fetchUser": [Function],
                                                "postUser": [Function],
                                                "userHasErrored": "",
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                                <div
                                                class="form-request"
                                >
                                                <button
                                                                name="create-user"
                                                                class="create-user button"
                                                >
                                                                Create Account
                                                </button>
                                                <button
                                                                name="log-in"
                                                                class="log-in button"
                                                >
                                                                Log In
                                                </button>
                                </div>
                                <form
                                                class="form-container"
                                >
                                                <input
                                                                class="input"
                                                                type="text"
                                                                name="name"
                                                                placeholder="Enter your name"
                                                                value=""
                                                />
                                                <input
                                                                class="input"
                                                                type="text"
                                                                name="email"
                                                                placeholder="Enter your email"
                                                                value=""
                                                />
                                                <input
                                                                class="input"
                                                                type="password"
                                                                name="password"
                                                                placeholder="Enter a password"
                                                                value=""
                                                />
                                                <button
                                                                class="submit-btn"
                                                                type="submit"
                                                >
                                                                Submit 
                                                </button>
                                                <p />
                                                <div />
                                </form>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "fetchUser": [Function],
                                                      "postUser": [Function],
                                                      "userHasErrored": "",
                                                    }
                  }
/>,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": Object {
            "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
            "lineNumber": 53,
          },
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
              "lineNumber": 54,
            },
            "alternate": null,
            "child": FiberNode {
              "_debugID": 9,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                "lineNumber": 55,
              },
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": "Create Account",
                "className": "create-user button",
                "name": "create-user",
                "onClick": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": "Create Account",
                "className": "create-user button",
                "name": "create-user",
                "onClick": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 10,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                  "lineNumber": 58,
                },
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Log In",
                  "className": "log-in button",
                  "name": "log-in",
                  "onClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Log In",
                  "className": "log-in button",
                  "name": "log-in",
                  "onClick": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <button
                  name="log-in"
                  class="log-in button"
>
                  Log In
</button>,
                "tag": 5,
                "type": "button",
                "updateQueue": null,
              },
              "stateNode": <button
                name="create-user"
                class="create-user button"
>
                Create Account
</button>,
              "tag": 5,
              "type": "button",
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <button
                  className="create-user button"
                  name="create-user"
                  onClick={[Function]}
>
                  Create Account
</button>,
                <button
                  className="log-in button"
                  name="log-in"
                  onClick={[Function]}
>
                  Log In
</button>,
              ],
              "className": "form-request",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <button
                  className="create-user button"
                  name="create-user"
                  onClick={[Function]}
>
                  Create Account
</button>,
                <button
                  className="log-in button"
                  name="log-in"
                  onClick={[Function]}
>
                  Log In
</button>,
              ],
              "className": "form-request",
            },
            "ref": null,
            "return": [Circular],
            "sibling": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                "lineNumber": 62,
              },
              "alternate": null,
              "child": FiberNode {
                "_debugID": 11,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                  "lineNumber": 64,
                },
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "className": "input",
                  "name": "name",
                  "onChange": [Function],
                  "placeholder": "Enter your name",
                  "type": "text",
                  "value": "",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "className": "input",
                  "name": "name",
                  "onChange": [Function],
                  "placeholder": "Enter your name",
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                    "lineNumber": 66,
                  },
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "input",
                    "name": "email",
                    "onChange": [Function],
                    "placeholder": "Enter your email",
                    "type": "text",
                    "value": "",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "input",
                    "name": "email",
                    "onChange": [Function],
                    "placeholder": "Enter your email",
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                      "lineNumber": 67,
                    },
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "input",
                      "name": "password",
                      "onChange": [Function],
                      "placeholder": "Enter a password",
                      "type": "password",
                      "value": "",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "input",
                      "name": "password",
                      "onChange": [Function],
                      "placeholder": "Enter a password",
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                        "lineNumber": 68,
                      },
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": " Submit ",
                        "className": "submit-btn",
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": " Submit ",
                        "className": "submit-btn",
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                          "lineNumber": 69,
                        },
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 4,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": undefined,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": undefined,
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                            "lineNumber": 51,
                          },
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 5,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {},
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {},
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <div />,
                          "tag": 5,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <p />,
                        "tag": 5,
                        "type": "p",
                        "updateQueue": null,
                      },
                      "stateNode": <button
                        class="submit-btn"
                        type="submit"
>
                        Submit 
</button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <input
                      class="input"
                      type="password"
                      name="password"
                      placeholder="Enter a password"
                      value=""
/>,
                    "tag": 5,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "stateNode": <input
                    class="input"
                    type="text"
                    name="email"
                    placeholder="Enter your email"
                    value=""
/>,
                  "tag": 5,
                  "type": "input",
                  "updateQueue": null,
                },
                "stateNode": <input
                  class="input"
                  type="text"
                  name="name"
                  placeholder="Enter your name"
                  value=""
/>,
                "tag": 5,
                "type": "input",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 1,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <input
                    className="input"
                    name="name"
                    onChange={[Function]}
                    placeholder="Enter your name"
                    type="text"
                    value=""
/>,
                  <input
                    className="input"
                    name="email"
                    onChange={[Function]}
                    placeholder="Enter your email"
                    type="text"
                    value=""
/>,
                  <input
                    className="input"
                    name="password"
                    onChange={[Function]}
                    placeholder="Enter a password"
                    type="password"
                    value=""
/>,
                  <button
                    className="submit-btn"
                    type="submit"
>
                     Submit 
</button>,
                  <p />,
                  <div />,
                ],
                "className": "form-container",
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <input
                    className="input"
                    name="name"
                    onChange={[Function]}
                    placeholder="Enter your name"
                    type="text"
                    value=""
/>,
                  <input
                    className="input"
                    name="email"
                    onChange={[Function]}
                    placeholder="Enter your email"
                    type="text"
                    value=""
/>,
                  <input
                    className="input"
                    name="password"
                    onChange={[Function]}
                    placeholder="Enter a password"
                    type="password"
                    value=""
/>,
                  <button
                    className="submit-btn"
                    type="submit"
>
                     Submit 
</button>,
                  <p />,
                  <div />,
                ],
                "className": "form-container",
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form
                class="form-container"
>
                <input
                                class="input"
                                type="text"
                                name="name"
                                placeholder="Enter your name"
                                value=""
                />
                <input
                                class="input"
                                type="text"
                                name="email"
                                placeholder="Enter your email"
                                value=""
                />
                <input
                                class="input"
                                type="password"
                                name="password"
                                placeholder="Enter a password"
                                value=""
                />
                <button
                                class="submit-btn"
                                type="submit"
                >
                                Submit 
                </button>
                <p />
                <div />
</form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "stateNode": <div
              class="form-request"
>
              <button
                            name="create-user"
                            class="create-user button"
              >
                            Create Account
              </button>
              <button
                            name="log-in"
                            class="log-in button"
              >
                            Log In
              </button>
</div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 0,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": Array [
              <div
                className="form-request"
>
                <button
                                className="create-user button"
                                name="create-user"
                                onClick={[Function]}
                >
                                Create Account
                </button>
                <button
                                className="log-in button"
                                name="log-in"
                                onClick={[Function]}
                >
                                Log In
                </button>
</div>,
              <form
                className="form-container"
                onSubmit={[Function]}
>
                <input
                                className="input"
                                name="name"
                                onChange={[Function]}
                                placeholder="Enter your name"
                                type="text"
                                value=""
                />
                <input
                                className="input"
                                name="email"
                                onChange={[Function]}
                                placeholder="Enter your email"
                                type="text"
                                value=""
                />
                <input
                                className="input"
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter a password"
                                type="password"
                                value=""
                />
                <button
                                className="submit-btn"
                                type="submit"
                >
                                 Submit 
                </button>
                <p />
                <div />
</form>,
            ],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": Array [
              <div
                className="form-request"
>
                <button
                                className="create-user button"
                                name="create-user"
                                onClick={[Function]}
                >
                                Create Account
                </button>
                <button
                                className="log-in button"
                                name="log-in"
                                onClick={[Function]}
                >
                                Log In
                </button>
</div>,
              <form
                className="form-container"
                onSubmit={[Function]}
>
                <input
                                className="input"
                                name="name"
                                onChange={[Function]}
                                placeholder="Enter your name"
                                type="text"
                                value=""
                />
                <input
                                className="input"
                                name="email"
                                onChange={[Function]}
                                placeholder="Enter your email"
                                type="text"
                                value=""
                />
                <input
                                className="input"
                                name="password"
                                onChange={[Function]}
                                placeholder="Enter a password"
                                type="password"
                                value=""
                />
                <button
                                className="submit-btn"
                                type="submit"
                >
                                 Submit 
                </button>
                <p />
                <div />
</form>,
            ],
          },
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": <div>
            <div
                        class="form-request"
            >
                        <button
                                    name="create-user"
                                    class="create-user button"
                        >
                                    Create Account
                        </button>
                        <button
                                    name="log-in"
                                    class="log-in button"
                        >
                                    Log In
                        </button>
            </div>
            <form
                        class="form-container"
            >
                        <input
                                    class="input"
                                    type="text"
                                    name="name"
                                    placeholder="Enter your name"
                                    value=""
                        />
                        <input
                                    class="input"
                                    type="text"
                                    name="email"
                                    placeholder="Enter your email"
                                    value=""
                        />
                        <input
                                    class="input"
                                    type="password"
                                    name="password"
                                    placeholder="Enter a password"
                                    value=""
                        />
                        <button
                                    class="submit-btn"
                                    type="submit"
                        >
                                    Submit 
                        </button>
                        <p />
                        <div />
            </form>
</div>,
          "tag": 5,
          "type": "div",
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "fetchUser": [Function],
          "postUser": [Function],
          "userHasErrored": "",
        },
        "memoizedState": Object {
          "email": "",
          "errorMessage": "",
          "formState": "create-user",
          "name": "",
          "password": "",
          "userLoggedIn": false,
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "fetchUser": [Function],
          "postUser": [Function],
          "userHasErrored": "",
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "fetchUser": [Function],
              "postUser": [Function],
              "userHasErrored": "",
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "fetchUser": [Function],
              "postUser": [Function],
              "userHasErrored": "",
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "fetchUser": [Function],
              "postUser": [Function],
              "userHasErrored": "",
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                                    <div
                                                      class="form-request"
                                    >
                                                      <button
                                                                        name="create-user"
                                                                        class="create-user button"
                                                      >
                                                                        Create Account
                                                      </button>
                                                      <button
                                                                        name="log-in"
                                                                        class="log-in button"
                                                      >
                                                                        Log In
                                                      </button>
                                    </div>
                                    <form
                                                      class="form-container"
                                    >
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="name"
                                                                        placeholder="Enter your name"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="email"
                                                                        placeholder="Enter your email"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="password"
                                                                        name="password"
                                                                        placeholder="Enter a password"
                                                                        value=""
                                                      />
                                                      <button
                                                                        class="submit-btn"
                                                                        type="submit"
                                                      >
                                                                        Submit 
                                                      </button>
                                                      <p />
                                                      <div />
                                    </form>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "fetchUser": [Function],
                                                                  "postUser": [Function],
                                                                  "userHasErrored": "",
                                                                }
                      }
/>,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "fetchUser": [Function],
                                                                  "postUser": [Function],
                                                                  "userHasErrored": "",
                                                                }
                      }
/>,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "fetchUser": [Function],
                                                "postUser": [Function],
                                                "userHasErrored": "",
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div>
                                <div
                                                class="form-request"
                                >
                                                <button
                                                                name="create-user"
                                                                class="create-user button"
                                                >
                                                                Create Account
                                                </button>
                                                <button
                                                                name="log-in"
                                                                class="log-in button"
                                                >
                                                                Log In
                                                </button>
                                </div>
                                <form
                                                class="form-container"
                                >
                                                <input
                                                                class="input"
                                                                type="text"
                                                                name="name"
                                                                placeholder="Enter your name"
                                                                value=""
                                                />
                                                <input
                                                                class="input"
                                                                type="text"
                                                                name="email"
                                                                placeholder="Enter your email"
                                                                value=""
                                                />
                                                <input
                                                                class="input"
                                                                type="password"
                                                                name="password"
                                                                placeholder="Enter a password"
                                                                value=""
                                                />
                                                <button
                                                                class="submit-btn"
                                                                type="submit"
                                                >
                                                                Submit 
                                                </button>
                                                <p />
                                                <div />
                                </form>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "fetchUser": [Function],
                                                      "postUser": [Function],
                                                      "userHasErrored": "",
                                                    }
                  }
/>,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "handleChange": [Function],
      "handleSubmit": [Function],
      "props": Object {
        "fetchUser": [Function],
        "postUser": [Function],
        "userHasErrored": "",
      },
      "refs": Object {},
      "requestForm": [Function],
      "state": Object {
        "email": "",
        "errorMessage": "",
        "formState": "create-user",
        "name": "",
        "password": "",
        "userLoggedIn": false,
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "fetchUser": [Function],
      "postUser": [Function],
      "userHasErrored": "",
    },
    "ref": null,
    "rendered": Object {
      "instance": <div>
        <div
                class="form-request"
        >
                <button
                        name="create-user"
                        class="create-user button"
                >
                        Create Account
                </button>
                <button
                        name="log-in"
                        class="log-in button"
                >
                        Log In
                </button>
        </div>
        <form
                class="form-container"
        >
                <input
                        class="input"
                        type="text"
                        name="name"
                        placeholder="Enter your name"
                        value=""
                />
                <input
                        class="input"
                        type="text"
                        name="email"
                        placeholder="Enter your email"
                        value=""
                />
                <input
                        class="input"
                        type="password"
                        name="password"
                        placeholder="Enter a password"
                        value=""
                />
                <button
                        class="submit-btn"
                        type="submit"
                >
                        Submit 
                </button>
                <p />
                <div />
        </form>
</div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="form-request"
>
            <button
                        className="create-user button"
                        name="create-user"
                        onClick={[Function]}
            >
                        Create Account
            </button>
            <button
                        className="log-in button"
                        name="log-in"
                        onClick={[Function]}
            >
                        Log In
            </button>
</div>,
          <form
            className="form-container"
            onSubmit={[Function]}
>
            <input
                        className="input"
                        name="name"
                        onChange={[Function]}
                        placeholder="Enter your name"
                        type="text"
                        value=""
            />
            <input
                        className="input"
                        name="email"
                        onChange={[Function]}
                        placeholder="Enter your email"
                        type="text"
                        value=""
            />
            <input
                        className="input"
                        name="password"
                        onChange={[Function]}
                        placeholder="Enter a password"
                        type="password"
                        value=""
            />
            <button
                        className="submit-btn"
                        type="submit"
            >
                         Submit 
            </button>
            <p />
            <div />
</form>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <div
            class="form-request"
>
            <button
                        name="create-user"
                        class="create-user button"
            >
                        Create Account
            </button>
            <button
                        name="log-in"
                        class="log-in button"
            >
                        Log In
            </button>
</div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="create-user button"
                name="create-user"
                onClick={[Function]}
>
                Create Account
</button>,
              <button
                className="log-in button"
                name="log-in"
                onClick={[Function]}
>
                Log In
</button>,
            ],
            "className": "form-request",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <button
                name="create-user"
                class="create-user button"
>
                Create Account
</button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Create Account",
                "className": "create-user button",
                "name": "create-user",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                "Create Account",
              ],
              "type": "button",
            },
            Object {
              "instance": <button
                name="log-in"
                class="log-in button"
>
                Log In
</button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Log In",
                "className": "log-in button",
                "name": "log-in",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                "Log In",
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": <form
            class="form-container"
>
            <input
                        class="input"
                        type="text"
                        name="name"
                        placeholder="Enter your name"
                        value=""
            />
            <input
                        class="input"
                        type="text"
                        name="email"
                        placeholder="Enter your email"
                        value=""
            />
            <input
                        class="input"
                        type="password"
                        name="password"
                        placeholder="Enter a password"
                        value=""
            />
            <button
                        class="submit-btn"
                        type="submit"
            >
                        Submit 
            </button>
            <p />
            <div />
</form>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                className="input"
                name="name"
                onChange={[Function]}
                placeholder="Enter your name"
                type="text"
                value=""
/>,
              <input
                className="input"
                name="email"
                onChange={[Function]}
                placeholder="Enter your email"
                type="text"
                value=""
/>,
              <input
                className="input"
                name="password"
                onChange={[Function]}
                placeholder="Enter a password"
                type="password"
                value=""
/>,
              <button
                className="submit-btn"
                type="submit"
>
                 Submit 
</button>,
              <p />,
              <div />,
            ],
            "className": "form-container",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <input
                class="input"
                type="text"
                name="name"
                placeholder="Enter your name"
                value=""
/>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input",
                "name": "name",
                "onChange": [Function],
                "placeholder": "Enter your name",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "input",
            },
            Object {
              "instance": <input
                class="input"
                type="text"
                name="email"
                placeholder="Enter your email"
                value=""
/>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input",
                "name": "email",
                "onChange": [Function],
                "placeholder": "Enter your email",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "input",
            },
            Object {
              "instance": <input
                class="input"
                type="password"
                name="password"
                placeholder="Enter a password"
                value=""
/>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input",
                "name": "password",
                "onChange": [Function],
                "placeholder": "Enter a password",
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "input",
            },
            Object {
              "instance": <button
                class="submit-btn"
                type="submit"
>
                Submit 
</button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": " Submit ",
                "className": "submit-btn",
                "type": "submit",
              },
              "ref": null,
              "rendered": Array [
                " Submit ",
              ],
              "type": "button",
            },
            Object {
              "instance": <p />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "p",
            },
            Object {
              "instance": <div />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": Array [
                undefined,
              ],
              "type": "div",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": LogInPage {
        "_reactInternalFiber": FiberNode {
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                                        <div
                                                            class="form-request"
                                        >
                                                            <button
                                                                                name="create-user"
                                                                                class="create-user button"
                                                            >
                                                                                Create Account
                                                            </button>
                                                            <button
                                                                                name="log-in"
                                                                                class="log-in button"
                                                            >
                                                                                Log In
                                                            </button>
                                        </div>
                                        <form
                                                            class="form-container"
                                        >
                                                            <input
                                                                                class="input"
                                                                                type="text"
                                                                                name="name"
                                                                                placeholder="Enter your name"
                                                                                value=""
                                                            />
                                                            <input
                                                                                class="input"
                                                                                type="text"
                                                                                name="email"
                                                                                placeholder="Enter your email"
                                                                                value=""
                                                            />
                                                            <input
                                                                                class="input"
                                                                                type="password"
                                                                                name="password"
                                                                                placeholder="Enter a password"
                                                                                value=""
                                                            />
                                                            <button
                                                                                class="submit-btn"
                                                                                type="submit"
                                                            >
                                                                                Submit 
                                                            </button>
                                                            <p />
                                                            <div />
                                        </form>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "fetchUser": [Function],
                                                                        "postUser": [Function],
                                                                        "userHasErrored": "",
                                                                      }
                        }
/>,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "fetchUser": [Function],
                                                                        "postUser": [Function],
                                                                        "userHasErrored": "",
                                                                      }
                        }
/>,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "fetchUser": [Function],
                                                      "postUser": [Function],
                                                      "userHasErrored": "",
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                                    <div
                                                      class="form-request"
                                    >
                                                      <button
                                                                        name="create-user"
                                                                        class="create-user button"
                                                      >
                                                                        Create Account
                                                      </button>
                                                      <button
                                                                        name="log-in"
                                                                        class="log-in button"
                                                      >
                                                                        Log In
                                                      </button>
                                    </div>
                                    <form
                                                      class="form-container"
                                    >
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="name"
                                                                        placeholder="Enter your name"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="email"
                                                                        placeholder="Enter your email"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="password"
                                                                        name="password"
                                                                        placeholder="Enter a password"
                                                                        value=""
                                                      />
                                                      <button
                                                                        class="submit-btn"
                                                                        type="submit"
                                                      >
                                                                        Submit 
                                                      </button>
                                                      <p />
                                                      <div />
                                    </form>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "fetchUser": [Function],
                                                            "postUser": [Function],
                                                            "userHasErrored": "",
                                                          }
                    }
/>,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "fetchUser": [Function],
                  "postUser": [Function],
                  "userHasErrored": "",
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "fetchUser": [Function],
                  "postUser": [Function],
                  "userHasErrored": "",
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
              "lineNumber": 53,
            },
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                "lineNumber": 54,
              },
              "alternate": null,
              "child": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                  "lineNumber": 55,
                },
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Create Account",
                  "className": "create-user button",
                  "name": "create-user",
                  "onClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Create Account",
                  "className": "create-user button",
                  "name": "create-user",
                  "onClick": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                    "lineNumber": 58,
                  },
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "Log In",
                    "className": "log-in button",
                    "name": "log-in",
                    "onClick": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "Log In",
                    "className": "log-in button",
                    "name": "log-in",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <button
                    name="log-in"
                    class="log-in button"
>
                    Log In
</button>,
                  "tag": 5,
                  "type": "button",
                  "updateQueue": null,
                },
                "stateNode": <button
                  name="create-user"
                  class="create-user button"
>
                  Create Account
</button>,
                "tag": 5,
                "type": "button",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <button
                    className="create-user button"
                    name="create-user"
                    onClick={[Function]}
>
                    Create Account
</button>,
                  <button
                    className="log-in button"
                    name="log-in"
                    onClick={[Function]}
>
                    Log In
</button>,
                ],
                "className": "form-request",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <button
                    className="create-user button"
                    name="create-user"
                    onClick={[Function]}
>
                    Create Account
</button>,
                  <button
                    className="log-in button"
                    name="log-in"
                    onClick={[Function]}
>
                    Log In
</button>,
                ],
                "className": "form-request",
              },
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                  "lineNumber": 62,
                },
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 11,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                    "lineNumber": 64,
                  },
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "input",
                    "name": "name",
                    "onChange": [Function],
                    "placeholder": "Enter your name",
                    "type": "text",
                    "value": "",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "input",
                    "name": "name",
                    "onChange": [Function],
                    "placeholder": "Enter your name",
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                      "lineNumber": 66,
                    },
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "input",
                      "name": "email",
                      "onChange": [Function],
                      "placeholder": "Enter your email",
                      "type": "text",
                      "value": "",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "input",
                      "name": "email",
                      "onChange": [Function],
                      "placeholder": "Enter your email",
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                        "lineNumber": 67,
                      },
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "input",
                        "name": "password",
                        "onChange": [Function],
                        "placeholder": "Enter a password",
                        "type": "password",
                        "value": "",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "input",
                        "name": "password",
                        "onChange": [Function],
                        "placeholder": "Enter a password",
                        "type": "password",
                        "value": "",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                          "lineNumber": 68,
                        },
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 3,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": " Submit ",
                          "className": "submit-btn",
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": " Submit ",
                          "className": "submit-btn",
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 15,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                            "lineNumber": 69,
                          },
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 4,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": undefined,
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": undefined,
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 16,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/Users/valentinovalentin/turing/theMod3/movie-tracker/client-side-movie-tracker/src/Components/LogInPage/LogInPage.js",
                              "lineNumber": 51,
                            },
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 5,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {},
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {},
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <div />,
                            "tag": 5,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <p />,
                          "tag": 5,
                          "type": "p",
                          "updateQueue": null,
                        },
                        "stateNode": <button
                          class="submit-btn"
                          type="submit"
>
                          Submit 
</button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <input
                        class="input"
                        type="password"
                        name="password"
                        placeholder="Enter a password"
                        value=""
/>,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": <input
                      class="input"
                      type="text"
                      name="email"
                      placeholder="Enter your email"
                      value=""
/>,
                    "tag": 5,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "stateNode": <input
                    class="input"
                    type="text"
                    name="name"
                    placeholder="Enter your name"
                    value=""
/>,
                  "tag": 5,
                  "type": "input",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <input
                      className="input"
                      name="name"
                      onChange={[Function]}
                      placeholder="Enter your name"
                      type="text"
                      value=""
/>,
                    <input
                      className="input"
                      name="email"
                      onChange={[Function]}
                      placeholder="Enter your email"
                      type="text"
                      value=""
/>,
                    <input
                      className="input"
                      name="password"
                      onChange={[Function]}
                      placeholder="Enter a password"
                      type="password"
                      value=""
/>,
                    <button
                      className="submit-btn"
                      type="submit"
>
                       Submit 
</button>,
                    <p />,
                    <div />,
                  ],
                  "className": "form-container",
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <input
                      className="input"
                      name="name"
                      onChange={[Function]}
                      placeholder="Enter your name"
                      type="text"
                      value=""
/>,
                    <input
                      className="input"
                      name="email"
                      onChange={[Function]}
                      placeholder="Enter your email"
                      type="text"
                      value=""
/>,
                    <input
                      className="input"
                      name="password"
                      onChange={[Function]}
                      placeholder="Enter a password"
                      type="password"
                      value=""
/>,
                    <button
                      className="submit-btn"
                      type="submit"
>
                       Submit 
</button>,
                    <p />,
                    <div />,
                  ],
                  "className": "form-container",
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form
                  class="form-container"
>
                  <input
                                    class="input"
                                    type="text"
                                    name="name"
                                    placeholder="Enter your name"
                                    value=""
                  />
                  <input
                                    class="input"
                                    type="text"
                                    name="email"
                                    placeholder="Enter your email"
                                    value=""
                  />
                  <input
                                    class="input"
                                    type="password"
                                    name="password"
                                    placeholder="Enter a password"
                                    value=""
                  />
                  <button
                                    class="submit-btn"
                                    type="submit"
                  >
                                    Submit 
                  </button>
                  <p />
                  <div />
</form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "stateNode": <div
                class="form-request"
>
                <button
                                name="create-user"
                                class="create-user button"
                >
                                Create Account
                </button>
                <button
                                name="log-in"
                                class="log-in button"
                >
                                Log In
                </button>
</div>,
              "tag": 5,
              "type": "div",
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <div
                  className="form-request"
>
                  <button
                                    className="create-user button"
                                    name="create-user"
                                    onClick={[Function]}
                  >
                                    Create Account
                  </button>
                  <button
                                    className="log-in button"
                                    name="log-in"
                                    onClick={[Function]}
                  >
                                    Log In
                  </button>
</div>,
                <form
                  className="form-container"
                  onSubmit={[Function]}
>
                  <input
                                    className="input"
                                    name="name"
                                    onChange={[Function]}
                                    placeholder="Enter your name"
                                    type="text"
                                    value=""
                  />
                  <input
                                    className="input"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Enter your email"
                                    type="text"
                                    value=""
                  />
                  <input
                                    className="input"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter a password"
                                    type="password"
                                    value=""
                  />
                  <button
                                    className="submit-btn"
                                    type="submit"
                  >
                                     Submit 
                  </button>
                  <p />
                  <div />
</form>,
              ],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <div
                  className="form-request"
>
                  <button
                                    className="create-user button"
                                    name="create-user"
                                    onClick={[Function]}
                  >
                                    Create Account
                  </button>
                  <button
                                    className="log-in button"
                                    name="log-in"
                                    onClick={[Function]}
                  >
                                    Log In
                  </button>
</div>,
                <form
                  className="form-container"
                  onSubmit={[Function]}
>
                  <input
                                    className="input"
                                    name="name"
                                    onChange={[Function]}
                                    placeholder="Enter your name"
                                    type="text"
                                    value=""
                  />
                  <input
                                    className="input"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Enter your email"
                                    type="text"
                                    value=""
                  />
                  <input
                                    className="input"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Enter a password"
                                    type="password"
                                    value=""
                  />
                  <button
                                    className="submit-btn"
                                    type="submit"
                  >
                                     Submit 
                  </button>
                  <p />
                  <div />
</form>,
              ],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": <div>
              <div
                            class="form-request"
              >
                            <button
                                          name="create-user"
                                          class="create-user button"
                            >
                                          Create Account
                            </button>
                            <button
                                          name="log-in"
                                          class="log-in button"
                            >
                                          Log In
                            </button>
              </div>
              <form
                            class="form-container"
              >
                            <input
                                          class="input"
                                          type="text"
                                          name="name"
                                          placeholder="Enter your name"
                                          value=""
                            />
                            <input
                                          class="input"
                                          type="text"
                                          name="email"
                                          placeholder="Enter your email"
                                          value=""
                            />
                            <input
                                          class="input"
                                          type="password"
                                          name="password"
                                          placeholder="Enter a password"
                                          value=""
                            />
                            <button
                                          class="submit-btn"
                                          type="submit"
                            >
                                          Submit 
                            </button>
                            <p />
                            <div />
              </form>
</div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "fetchUser": [Function],
            "postUser": [Function],
            "userHasErrored": "",
          },
          "memoizedState": Object {
            "email": "",
            "errorMessage": "",
            "formState": "create-user",
            "name": "",
            "password": "",
            "userLoggedIn": false,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "fetchUser": [Function],
            "postUser": [Function],
            "userHasErrored": "",
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "fetchUser": [Function],
                "postUser": [Function],
                "userHasErrored": "",
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div>
                                        <div
                                                            class="form-request"
                                        >
                                                            <button
                                                                                name="create-user"
                                                                                class="create-user button"
                                                            >
                                                                                Create Account
                                                            </button>
                                                            <button
                                                                                name="log-in"
                                                                                class="log-in button"
                                                            >
                                                                                Log In
                                                            </button>
                                        </div>
                                        <form
                                                            class="form-container"
                                        >
                                                            <input
                                                                                class="input"
                                                                                type="text"
                                                                                name="name"
                                                                                placeholder="Enter your name"
                                                                                value=""
                                                            />
                                                            <input
                                                                                class="input"
                                                                                type="text"
                                                                                name="email"
                                                                                placeholder="Enter your email"
                                                                                value=""
                                                            />
                                                            <input
                                                                                class="input"
                                                                                type="password"
                                                                                name="password"
                                                                                placeholder="Enter a password"
                                                                                value=""
                                                            />
                                                            <button
                                                                                class="submit-btn"
                                                                                type="submit"
                                                            >
                                                                                Submit 
                                                            </button>
                                                            <p />
                                                            <div />
                                        </form>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "fetchUser": [Function],
                                                                        "postUser": [Function],
                                                                        "userHasErrored": "",
                                                                      }
                        }
/>,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "fetchUser": [Function],
                                                                        "postUser": [Function],
                                                                        "userHasErrored": "",
                                                                      }
                        }
/>,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "fetchUser": [Function],
                                                      "postUser": [Function],
                                                      "userHasErrored": "",
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div>
                                    <div
                                                      class="form-request"
                                    >
                                                      <button
                                                                        name="create-user"
                                                                        class="create-user button"
                                                      >
                                                                        Create Account
                                                      </button>
                                                      <button
                                                                        name="log-in"
                                                                        class="log-in button"
                                                      >
                                                                        Log In
                                                      </button>
                                    </div>
                                    <form
                                                      class="form-container"
                                    >
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="name"
                                                                        placeholder="Enter your name"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="text"
                                                                        name="email"
                                                                        placeholder="Enter your email"
                                                                        value=""
                                                      />
                                                      <input
                                                                        class="input"
                                                                        type="password"
                                                                        name="password"
                                                                        placeholder="Enter a password"
                                                                        value=""
                                                      />
                                                      <button
                                                                        class="submit-btn"
                                                                        type="submit"
                                                      >
                                                                        Submit 
                                                      </button>
                                                      <p />
                                                      <div />
                                    </form>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "fetchUser": [Function],
                                                            "postUser": [Function],
                                                            "userHasErrored": "",
                                                          }
                    }
/>,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "fetchUser": [Function],
                  "postUser": [Function],
                  "userHasErrored": "",
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "fetchUser": [Function],
                  "postUser": [Function],
                  "userHasErrored": "",
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "handleChange": [Function],
        "handleSubmit": [Function],
        "props": Object {
          "fetchUser": [Function],
          "postUser": [Function],
          "userHasErrored": "",
        },
        "refs": Object {},
        "requestForm": [Function],
        "state": Object {
          "email": "",
          "errorMessage": "",
          "formState": "create-user",
          "name": "",
          "password": "",
          "userLoggedIn": false,
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "fetchUser": [Function],
        "postUser": [Function],
        "userHasErrored": "",
      },
      "ref": null,
      "rendered": Object {
        "instance": <div>
          <div
                    class="form-request"
          >
                    <button
                              name="create-user"
                              class="create-user button"
                    >
                              Create Account
                    </button>
                    <button
                              name="log-in"
                              class="log-in button"
                    >
                              Log In
                    </button>
          </div>
          <form
                    class="form-container"
          >
                    <input
                              class="input"
                              type="text"
                              name="name"
                              placeholder="Enter your name"
                              value=""
                    />
                    <input
                              class="input"
                              type="text"
                              name="email"
                              placeholder="Enter your email"
                              value=""
                    />
                    <input
                              class="input"
                              type="password"
                              name="password"
                              placeholder="Enter a password"
                              value=""
                    />
                    <button
                              class="submit-btn"
                              type="submit"
                    >
                              Submit 
                    </button>
                    <p />
                    <div />
          </form>
</div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="form-request"
>
              <button
                            className="create-user button"
                            name="create-user"
                            onClick={[Function]}
              >
                            Create Account
              </button>
              <button
                            className="log-in button"
                            name="log-in"
                            onClick={[Function]}
              >
                            Log In
              </button>
</div>,
            <form
              className="form-container"
              onSubmit={[Function]}
>
              <input
                            className="input"
                            name="name"
                            onChange={[Function]}
                            placeholder="Enter your name"
                            type="text"
                            value=""
              />
              <input
                            className="input"
                            name="email"
                            onChange={[Function]}
                            placeholder="Enter your email"
                            type="text"
                            value=""
              />
              <input
                            className="input"
                            name="password"
                            onChange={[Function]}
                            placeholder="Enter a password"
                            type="password"
                            value=""
              />
              <button
                            className="submit-btn"
                            type="submit"
              >
                             Submit 
              </button>
              <p />
              <div />
</form>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <div
              class="form-request"
>
              <button
                            name="create-user"
                            class="create-user button"
              >
                            Create Account
              </button>
              <button
                            name="log-in"
                            class="log-in button"
              >
                            Log In
              </button>
</div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="create-user button"
                  name="create-user"
                  onClick={[Function]}
>
                  Create Account
</button>,
                <button
                  className="log-in button"
                  name="log-in"
                  onClick={[Function]}
>
                  Log In
</button>,
              ],
              "className": "form-request",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <button
                  name="create-user"
                  class="create-user button"
>
                  Create Account
</button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Create Account",
                  "className": "create-user button",
                  "name": "create-user",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": Array [
                  "Create Account",
                ],
                "type": "button",
              },
              Object {
                "instance": <button
                  name="log-in"
                  class="log-in button"
>
                  Log In
</button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Log In",
                  "className": "log-in button",
                  "name": "log-in",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": Array [
                  "Log In",
                ],
                "type": "button",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": <form
              class="form-container"
>
              <input
                            class="input"
                            type="text"
                            name="name"
                            placeholder="Enter your name"
                            value=""
              />
              <input
                            class="input"
                            type="text"
                            name="email"
                            placeholder="Enter your email"
                            value=""
              />
              <input
                            class="input"
                            type="password"
                            name="password"
                            placeholder="Enter a password"
                            value=""
              />
              <button
                            class="submit-btn"
                            type="submit"
              >
                            Submit 
              </button>
              <p />
              <div />
</form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  className="input"
                  name="name"
                  onChange={[Function]}
                  placeholder="Enter your name"
                  type="text"
                  value=""
/>,
                <input
                  className="input"
                  name="email"
                  onChange={[Function]}
                  placeholder="Enter your email"
                  type="text"
                  value=""
/>,
                <input
                  className="input"
                  name="password"
                  onChange={[Function]}
                  placeholder="Enter a password"
                  type="password"
                  value=""
/>,
                <button
                  className="submit-btn"
                  type="submit"
>
                   Submit 
</button>,
                <p />,
                <div />,
              ],
              "className": "form-container",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <input
                  class="input"
                  type="text"
                  name="name"
                  placeholder="Enter your name"
                  value=""
/>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "input",
                  "name": "name",
                  "onChange": [Function],
                  "placeholder": "Enter your name",
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "input",
              },
              Object {
                "instance": <input
                  class="input"
                  type="text"
                  name="email"
                  placeholder="Enter your email"
                  value=""
/>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "input",
                  "name": "email",
                  "onChange": [Function],
                  "placeholder": "Enter your email",
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "input",
              },
              Object {
                "instance": <input
                  class="input"
                  type="password"
                  name="password"
                  placeholder="Enter a password"
                  value=""
/>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "input",
                  "name": "password",
                  "onChange": [Function],
                  "placeholder": "Enter a password",
                  "type": "password",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "input",
              },
              Object {
                "instance": <button
                  class="submit-btn"
                  type="submit"
>
                  Submit 
</button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": " Submit ",
                  "className": "submit-btn",
                  "type": "submit",
                },
                "ref": null,
                "rendered": Array [
                  " Submit ",
                ],
                "type": "button",
              },
              Object {
                "instance": <p />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "p",
              },
              Object {
                "instance": <div />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "div",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
